<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.crowd.dao.AdminMapper">
  <resultMap id="BaseResultMap" type="com.crowd.entity.Admin">
    <result column="id" jdbcType="INTEGER" property="id" />
    <result column="login_acct" jdbcType="VARCHAR" property="loginAcct" />
    <result column="user_pswd" jdbcType="CHAR" property="userPswd" />
    <result column="user_name" jdbcType="VARCHAR" property="userName" />
    <result column="email" jdbcType="VARCHAR" property="email" />
    <result column="create_time" jdbcType="DATE" property="createTime" />
  </resultMap>

  <resultMap id="RoleResultMap" type="com.crowd.entity.Role">
    <result column="id" jdbcType="INTEGER" property="id" />
    <result column="name" jdbcType="VARCHAR" property="name" />
  </resultMap>

  <insert id="insert" parameterType="com.crowd.entity.Admin">
    insert into t_admin (id, login_acct, user_pswd, 
      user_name, email, create_time
      )
    values (#{id,jdbcType=INTEGER}, #{loginAcct,jdbcType=VARCHAR}, #{userPswd,jdbcType=CHAR}, 
      #{userName,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, #{createTime,jdbcType=DATE}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.crowd.entity.Admin">
    insert into t_admin
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="loginAcct != null">
        login_acct,
      </if>
      <if test="userPswd != null">
        user_pswd,
      </if>
      <if test="userName != null">
        user_name,
      </if>
      <if test="email != null">
        email,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="loginAcct != null">
        #{loginAcct,jdbcType=VARCHAR},
      </if>
      <if test="userPswd != null">
        #{userPswd,jdbcType=CHAR},
      </if>
      <if test="userName != null">
        #{userName,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=DATE},
      </if>
    </trim>

  </insert>

  <update id="updateSelective" parameterType="com.crowd.entity.Admin">
    update t_admin set
                       <trim suffixOverrides=",">
                         <if test="loginAcct != null">
                           login_acct=#{loginAcct},
                         </if>
                         <if test="userPswd != null">
                           user_pswd=#{userPswd},
                         </if>
                         <if test="userName != null">
                           user_name=#{userName},
                         </if>
                         <if test="email != null">
                           email=#{email},
                         </if>
                         <if test="createTime != null">
                           create_time=#{createTime}
                         </if>
                       </trim> where id=#{id};
  </update>

  <select id="queryAll" resultMap="BaseResultMap">
    select * from t_admin;
  </select>
  <select id="findUserByName" resultMap="BaseResultMap">
    select * from t_admin where project_crowd.t_admin.login_acct = #{loginacount}
  </select>
  <select id="selectAdminListByKeyWord" resultMap="BaseResultMap">
        select * from t_admin
        where
              login_acct like CONCAT("%",#{keyword},"%") or
              user_name like CONCAT("%",#{keyword},"%") or
              email like CONCAT("%",#{keyword},"%")
  </select>
  <select id="findUserById" resultMap="BaseResultMap">
    select * from t_admin where id = #{id};
  </select>
  <delete id="deleteUser">
    delete from t_admin where id=#{id}
  </delete>
  <update id="updateAdmin" parameterType="Admin">
    update t_admin
    set
        t_admin.user_pswd=#{admin.userPswd},
        t_admin.user_name=#{admin.userName},
        t_admin.email=#{admin.email}
    where
          login_acct=#{admin.loginAcct}
  </update>

  <select id="queryAlreadyAssignRole" parameterType="java.lang.Integer" resultMap="RoleResultMap">
    select * from t_role where id in (select role_id from admin_inner_role where admin_id=#{id})
  </select>

  <select id="queryUnAssignRole" parameterType="java.lang.Integer" resultMap="RoleResultMap">
    select * from t_role where id not in (select role_id from admin_inner_role where admin_id=#{id})
  </select>
  <delete id="removeAllAssignRoleByUserId" parameterType="java.lang.Integer">
    delete from admin_inner_role where admin_id=#{id}
  </delete>

  <insert id="addNewAssignRoleByUserId">
    insert into admin_inner_role(id,admin_id,role_id) values
    <foreach collection="newRolesAssign" item="role_id" separator=",">
      (null,#{id},#{role_id})
    </foreach>
  </insert>
</mapper>